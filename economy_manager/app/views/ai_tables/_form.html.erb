<%= form_with(model: ai_table) do |form| %>
  <% if ai_table.errors.any? %>
    <div style="color: red">
      <h2><%= pluralize(ai_table.errors.count, "error") %> prohibited this ai_table from being saved:</h2>

      <ul>
        <% ai_table.errors.each do |error| %>
          <li><%= error.full_message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div>
    <%= form.label :acronym, style: "display: block" %>
    <%= form.text_field :acronym %>
  </div>

  <div>
    <%= form.label :name, style: "display: block" %>
    <%= form.text_field :name %>
  </div>

  <div>
    <%= form.label :imgUrl, "Image URL", style: "display: block" %>
    <%= form.text_field :imgUrl %>
  </div>

  <div>
    <%= form.label :gross, style: "display: block" %>
    <%= form.number_field :gross %>
  </div>

  <div>
    <%= form.label :trade, style: "display: block" %>
    <%= form.number_field :trade %>
  </div>

  <hr></hr>

  <div>
    <%= form.label :co, "Co-Operative Coefficient", style: "display: block" %>
    <input type="range" id="co_slider" min="0" max="100" value="<%= ai_table.co %>" oninput="adjustSliders('co')" />
    <span id="co_value"><%= ai_table.co %></span>
    <%= form.hidden_field :co, id: "co_hidden", value: ai_table.co %>
  </div>

  <div>
    <%= form.label :iso, "Isolationist Coefficient", style: "display: block" %>
    <input type="range" id="iso_slider" min="0" max="100" value="<%= ai_table.iso %>" oninput="adjustSliders('iso')" />
    <span id="iso_value"><%= ai_table.iso %></span>
    <%= form.hidden_field :iso, id: "iso_hidden", value: ai_table.iso %>
  </div>

  <div>
    <%= form.label :ant, "Antagonistic Coefficient", style: "display: block" %>
    <input type="range" id="ant_slider" min="0" max="100" value="<%= ai_table.ant %>" oninput="adjustSliders('nt')" />
    <span id="ant_value"><%= ai_table.ant %></span>
    <%= form.hidden_field :ant, id: "ant_hidden", value: ai_table.ant %>
  </div>

  <script>
    const sliders = {
      co: document.getElementById('co_slider'),
      iso: document.getElementById('iso_slider'),
      ant: document.getElementById('ant_slider')
    };

    const values = {
      co: document.getElementById('co_value'),
      iso: document.getElementById('iso_value'),
      ant: document.getElementById('ant_value')
    };

    const hiddenFields = {
      co: document.getElementById('co_hidden'),
      iso: document.getElementById('iso_hidden'),
      ant: document.getElementById('ant_hidden')
    };

    // Function to jiggle the first 3 values around so the total is always equal to 100
    function adjustSliders(changed) {
      const total = 
        parseInt(sliders.co.value) + 
        parseInt(sliders.iso.value) + 
        parseInt(sliders.ant.value);

      if (total > 100) {
        const excess = total - 100;
        distributeExcess(excess, changed);
      } else if (total < 100) {
        const deficit = 100 - total;
        distributeExcess(deficit, changed, true); // Increase other sliders
      }

      updateDisplay();
    }

    // Current implementation only drags one
    function distributeExcess(amount, changed, increase) {
    const others = Object.keys(sliders).filter(key => key !== changed);
    for (let i = 0; i < others.length; i++) {
      const otherSlider = sliders[others[i]];
      const currentValue = parseInt(otherSlider.value);

      if (increase) {
        const space = 100 - currentValue;
        if (space >= amount) {
          otherSlider.value = currentValue + amount;
          break;
        } else {
          amount -= space;
          otherSlider.value = 100;
        }
      } else {
        if (currentValue >= amount) {
          otherSlider.value = currentValue - amount;
          break;
        } else {
          amount -= currentValue;
          otherSlider.value = 0;
        }
      }
    }
  }

    function updateDisplay() {
      for (const key in sliders) {
        values[key].textContent = sliders[key].value;
        hiddenFields[key].value = sliders[key].value;
      }
    }
  </script>

  <div>
    <%= form.label :state, "State & Ind Coefficient (0-100)", style: "display: block" %>
    <input type="range" min="0" max="100" step="1" id="state_ind_slider" value="<%= ai_table.state %>" />
    <div>
      <p>Statism: <span id="state_value"><%= ai_table.state %></span></p>
      <p>Individualism: <span id="ind_value"><%= ai_table.ind %></span></p>
    </div>
    <%= form.hidden_field :state, id: "state_value_hidden", value: ai_table.state %>
    <%= form.hidden_field :ind, id: "ind_value_hidden", value: ai_table.ind %>
  </div>

  <div>
    <%= form.submit %>
  </div>

   <script>
    // JavaScript to update both state and ind when slider is moved
    document.getElementById("state_ind_slider").addEventListener("input", function() {
      var sliderValue = this.value;

      // Update the displayed values dynamically as the slider moves
      document.getElementById("state_value").innerText = sliderValue;
      document.getElementById("ind_value").innerText = 100 - sliderValue; // Ind value is the complement of state

      // Set the hidden fields for the form submission
      document.getElementById("state_value_hidden").value = sliderValue;
      document.getElementById("ind_value_hidden").value = 100 - sliderValue;
    });
  </script>
<% end %>
